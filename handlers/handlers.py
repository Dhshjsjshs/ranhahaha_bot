__all__ = [
    "register_message_handler",
]


import logging

from aiogram import Router, F
from aiogram import types
from aiogram.filters.command import Command
from sqlalchemy import select, insert
from sqlalchemy.ext.asyncio import AsyncSession

from db import async_session_maker, User
from .callbacks import callback_continue
from .keyboards import keyboard_continue

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


# help_command
help_str = """
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç <b><i>–ò–ú–Ø –ë–û–¢–ê</i></b>\n
üí¨ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É <b>/help</b>\n
üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/status</b>
"""


async def help_command(message: types.Message):
    """—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    async with async_session_maker() as session:
        session: AsyncSession
        query = select(User).where(User.user_id == message.from_user.id)
        user_exit = await session.execute(query)

        if user_exit.scalars().all():
            await message.reply(text=help_str, parse_mode="HTML")
            logging.info(f"user {message.from_user.id} asks for help")

        else:
            new_user = {
                "user_id": message.from_user.id,
                "username": message.from_user.username
            }
            stmt = insert(User).values(**new_user)
            await session.execute(stmt)
            await session.commit()
            await message.reply(help_str, reply_markup=keyboard_continue)
            logging.info(f"register new user: {message.from_user.id}")


async def status_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async with async_session_maker() as session:
        session: AsyncSession
        query = select(User).where(User.user_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar()
        if not user:
            await message.reply("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /start")
            return

        await message.reply(text=f"<b>User ID</b>: <i>{user.user_id}</i>\n"
                                 f"<b>User name</b>: <i>{user.username}</i>",
                                 parse_mode="HTML")
        logging.info(f"user {message.from_user.id} is asking for status")


async def register_command(message: types.Message):
    text = f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ () –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å. –î–∞–ª–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω (/token —Ç–æ–∫–µ–Ω) "

    logging.info(f"{message.from_user.id} - register_command")
    await message.reply(text)


async def token_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

    logging.info(f"{message.from_user.id} - token_command")



async def add_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

    logging.info(f"{message.from_user.id} - add_command")


async def delete_command(message: types.Message):
    async with async_session_maker() as session:
        session: AsyncSession

    logging.info(f"{message.from_user.id} - delete_command")


async def listen_user_text(message: types.Message):
    teacherid = message.text.split("/")[1]

    async with async_session_maker() as session:
        session: AsyncSession

        teacher = await session.get(User, teacherid)

        # –µ—Å–ª–∏ –ø—Ä–µ–ø–æ–¥ –Ω–∞–π–¥–µ–Ω
        if teacher:
            currentuser = await session.get(User, message.from_user.id)

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
            if currentuser:
                currentuser.teacher = teacherid

                await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{teacher.username}")
            else:
                # –Ω–æ–≤—ã–π —é–∑–µ—Ä
                new_user = User(id=message.from_user.id, teacher=teacherid, username=message.from_user.username)
                session.add(new_user)

                await message.answer(f"–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å –∫ @{teacher.username}")

        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")

        await session.commit()
        await session.close()




def register_message_handler(router: Router):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"""
    router.message.register(listen_user_text)
    router.message.register(help_command, Command(commands=["start", "help"]))
    router.message.register(status_command, Command(commands=["status"]))
    router.message.register(delete_command, Command(commands=["delete"]))
    router.message.register(add_command, Command(commands=["add"]))
    router.message.register(token_command, Command(commands=["token"]))
    router.callback_query.register(callback_continue, F.data.startswith("continue_"))
